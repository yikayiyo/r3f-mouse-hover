/*
This file was generated by https://github.com/pmndrs/gltfjsx and then
customized manually. It uses drei's new useAnimations hook which extracts
all actions and sets up a THREE.AnimationMixer for it so that you don't have to.
All of the assets actions, action-names and clips are available in its output. 
*/

import { useEffect, useState, useRef } from "react"
import { useFrame } from "@react-three/fiber"
import { useGLTF, useTexture, useAnimations } from "@react-three/drei"
import { easing } from "maath"

export default function Model(props) {
  const halo = useRef()
  // Fetch model and a separate texture
  const texture = useTexture("/stacy.jpg")
  const { nodes, animations } = useGLTF("/stacy.glb")
  // Extract animation actions
  const { ref, actions, names } = useAnimations(animations)
  // Hover and animation-index states
  const [hovered, setHovered] = useState(false)
  const [index, setIndex] = useState(4)

  // Change cursor on hover-state
  // 因为要修改鼠标样式，属于操作外部系统，使用 useEffect
  // useEffect(() => void (document.body.style.cursor = hovered ? "pointer" : "auto"), [hovered])

  // Change animation when the index changes
  // 模型上有点击事件，点击只是简单的改变 index 的值
  useEffect(() => {
    // Reset and fade in animation after an index has been changed
    // 先重置动画再淡入
    actions[names[index]].reset().fadeIn(0.5).play()
    // 清理：直接淡出
    return () => actions[names[index]].fadeOut(0.5)
  }, [index, actions, names])

  // useFrame
  // 可以用来实现动画、互动效果
  // Tips：避免耗时操作和不必要的状态更新
  useFrame((state, delta) => {
    // Animate the selection halo
    // easing.damp3(halo.current.scale, hovered ? 1.15 : 1, 0.2, delta)
    easing.dampC(halo.current.material.color, hovered ? "hotpink" : "aquamarine", 0.2, delta)
  })

  return (
    <group ref={ref} {...props} dispose={null}>
      <group rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
        <primitive object={nodes.mixamorigHips} />
        <skinnedMesh
          castShadow
          receiveShadow
          onPointerOver={() => setHovered(true)}
          onPointerOut={() => setHovered(false)}
          onClick={() => setIndex((index + 1) % names.length)}
          geometry={nodes.stacy.geometry}
          skeleton={nodes.stacy.skeleton}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={100}>
          <meshStandardMaterial map={texture} map-flipY={false} skinning />
        </skinnedMesh>
      </group>
      <mesh ref={halo} receiveShadow position={[1, 1, -2]}>
        <sphereGeometry args={[1, 64]} />
        <meshStandardMaterial />
      </mesh>
    </group>
  )
}
